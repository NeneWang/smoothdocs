"use strict";(self.webpackChunksmoothdocs=self.webpackChunksmoothdocs||[]).push([[471],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return h}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),u=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=u(e.components);return r.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),p=u(n),h=a,m=p["".concat(s,".").concat(h)]||p[h]||d[h]||i;return n?r.createElement(m,l(l({ref:t},c),{},{components:n})):r.createElement(m,l({ref:t},c))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,l=new Array(i);l[0]=p;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:a,l[1]=o;for(var u=2;u<i;u++)l[u]=n[u];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},3042:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return s},default:function(){return h},frontMatter:function(){return o},metadata:function(){return u},toc:function(){return d}});var r=n(7462),a=n(3366),i=(n(7294),n(3905)),l=["components"],o={sidebar_position:2,title:"Mid AlgoExp - 16-24"},s=void 0,u={unversionedId:"cs/mid-2",id:"cs/mid-2",title:"Mid AlgoExp - 16-24",description:"16 -  Invert Binary Tree",source:"@site/resources/cs/mid-2.md",sourceDirName:"cs",slug:"/cs/mid-2",permalink:"/resources/cs/mid-2",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,title:"Mid AlgoExp - 16-24"},sidebar:"tutorialSidebar",previous:{title:"Mid AlgoExp - 6-15",permalink:"/resources/cs/mid-1"},next:{title:"Mid AlgoExp - 25",permalink:"/resources/cs/mid-3"}},c={},d=[{value:"16 -  Invert Binary Tree",id:"16----invert-binary-tree",level:2},{value:"17 -  Binary Tree Diameter",id:"17----binary-tree-diameter",level:2},{value:"17b -  Find Successor",id:"17b----find-successor",level:2},{value:"18 -  Height Balanced Binary Tree",id:"18----height-balanced-binary-tree",level:2},{value:"19 -  Max Subset Sum No Adjacent",id:"19----max-subset-sum-no-adjacent",level:2},{value:"20 -  Number of Ways to Make Change",id:"20----number-of-ways-to-make-change",level:2},{value:"21 -  Min Number of Coins for Change",id:"21----min-number-of-coins-for-change",level:2},{value:"22 -  Levenshtein Distance",id:"22----levenshtein-distance",level:2},{value:"23 -  Kadane&#39;s Algorithm",id:"23----kadanes-algorithm",level:2},{value:"24 -  Single Cycle Check",id:"24----single-cycle-check",level:2}],p={toc:d};function h(e){var t=e.components,o=(0,a.Z)(e,l);return(0,i.kt)("wrapper",(0,r.Z)({},p,o,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"16----invert-binary-tree"},"16 -  Invert Binary Tree"),(0,i.kt)("p",null,"Write a function that takes in a Binary Tree and inverts it. In other words, the function should swap every left node in the tree for its corresponding right node."),(0,i.kt)("p",null,(0,i.kt)("img",{src:n(9374).Z,width:"685",height:"495"})),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Starter Code")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"function invertBinaryTree(tree) {\n  // Write your code here.\n}\n\n// This is the class of the input binary tree.\nclass BinaryTree {\n  constructor(value) {\n    this.value = value;\n    this.left = null;\n    this.right = null;\n  }\n}\n\n")),(0,i.kt)("details",null,(0,i.kt)("summary",null,"\ud83d\udc68\u200d\ud83d\udd2c Javascript Solution"),(0,i.kt)("div",null,(0,i.kt)("p",null,(0,i.kt)("img",{src:n(9300).Z,width:"1227",height:"811"})),(0,i.kt)("iframe",{width:"380",height:"420",src:"https://www.youtube.com/embed/pqWXSxn-4oM",title:"YouTube video player",frameborder:"0",allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture",allowfullscreen:"true"}),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"\nfunction invertBinaryTree(tree) {\n    // Write your code here.\n    const queue = [tree];\n    while (queue.length) {\n        const current = queue.shift();\n        if (current === null) continue;\n        swapLeftAndRight(current);\n        queue.push(current.left);\n        queue.push(current.right);\n    }\n\n\n\n}\n\nfunction swapLeftAndRight(tree) {\n    const left = tree.left;\n    tree.left = tree.right;\n    tree.right = left;\n}\n}\n\n")))),(0,i.kt)("h2",{id:"17----binary-tree-diameter"},"17 -  Binary Tree Diameter"),(0,i.kt)("p",null,"Write a function that takes in a Binary Tree and returns its diameter. The diameter of a binary tree is defined as the length of its longest path, even if that path doesn't pass through the root of the tree."),(0,i.kt)("p",null,(0,i.kt)("img",{src:n(6249).Z,width:"634",height:"400"})),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Starter Code")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"// This is an input class. Do not edit.\nclass BinaryTree {\n  constructor(value) {\n    this.value = value;\n    this.left = null;\n    this.right = null;\n  }\n}\n\nfunction binaryTreeDiameter(tree) {\n  // Write your code here.\n  return -1;\n}\n\n")),(0,i.kt)("details",null,(0,i.kt)("summary",null,"\ud83d\udc68\u200d\ud83d\udd2c Javascript Solution"),(0,i.kt)("div",null,(0,i.kt)("p",null,(0,i.kt)("img",{src:n(9434).Z,width:"1188",height:"784"})),(0,i.kt)("iframe",{width:"380",height:"420",src:"https://www.youtube.com/embed/9kDaGmTZhVI",title:"YouTube video player",frameborder:"0",allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture",allowfullscreen:"true"}),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"Solution Code\n}\n\n")))),(0,i.kt)("h2",{id:"17b----find-successor"},"17b -  Find Successor"),(0,i.kt)("p",null,"Write a fucntion that takes in a Binary Tree ( Where nodes have an additional pointer to their parend node) as welll as a node contained in that tree and return the given node's successor."),(0,i.kt)("p",null,(0,i.kt)("img",{src:n(5596).Z,width:"849",height:"560"})),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Starter Code")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"// This is an input class. Do not edit.\nclass BinaryTree {\n  constructor(value) {\n    this.value = value;\n    this.left = null;\n    this.right = null;\n    this.parent = null;\n  }\n}\n\nfunction findSuccessor(tree, node) {\n  // Write your code here.\n  return null;\n}\n\n")),(0,i.kt)("details",null,(0,i.kt)("summary",null,"\ud83d\udc68\u200d\ud83d\udd2c Javascript Solution"),(0,i.kt)("div",null,(0,i.kt)("p",null,(0,i.kt)("img",{src:n(9434).Z,width:"1188",height:"784"})),(0,i.kt)("iframe",{width:"380",height:"420",src:"https://www.youtube.com/embed/9kDaGmTZhVI",title:"YouTube video player",frameborder:"0",allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture",allowfullscreen:"true"}),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"class BinaryTree {\n    constructor(value) {\n        this.value = value;\n        this.left = null;\n        this.right = null;\n        this.parent = null;\n    }\n}\n\nfunction findSuccessor(tree, node) {\n    const inOrderTraversalOrder = getInOrderTraversalOrder(tree);\n\n    for (let idx = 0; idx < inOrderTraversalOrder.length; idx++) {\n        const currentNode = inOrderTraversalOrder[idx];\n        if (currentNode !== node) continue;\n\n        if (idx === inOrderTraversalOrder.length - 1) return null;\n\n        return inOrderTraversalOrder[idx + 1];\n    }\n}\n\nfunction getInOrderTraversalOrder(node, order = []) {\n    if (node === null) return order;\n    getInOrderTraversalOrder(node.left, order);\n    order.push(node);\n    getInOrderTraversalOrder(node.right, order);\n\n    return order;\n}\n")))),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Advanced Solution"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"\nfunction findSuccessor(tree, node) {\n    if (node.right !== null) return getLeftMostChild(node.right);\n    return getRightMostParent(node);\n}\n\n\nfunction getLeftMostChild(node){\n    let currentNode = node;\n    while(currentNode.left !== null){\n        currentNode = currentNode.left;\n    }\n\n    return currentNode;\n}\n\nfunction getRightMostParent(node) {\n    let currentNode = node;\n    while (currentNode.parent !== null && currentNode.parent.right == currentNode) {\n        currentNode = currentNode.parent;\n    }\n    return currentNode.parent;\n}\n\n"))),(0,i.kt)("h2",{id:"18----height-balanced-binary-tree"},"18 -  Height Balanced Binary Tree"),(0,i.kt)("p",null,"You're given the root node of a Binary Tree. Write a function that returns ",(0,i.kt)("inlineCode",{parentName:"p"},"true")," if this Binary Tree is height balanced and ",(0,i.kt)("inlineCode",{parentName:"p"},"false")," if it isn't"),(0,i.kt)("p",null,(0,i.kt)("img",{src:n(6397).Z,width:"544",height:"486"})),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Starter Code")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"// This is an input class. Do not edit.\nclass BinaryTree {\n  constructor(value) {\n    this.value = value;\n    this.left = null;\n    this.right = null;\n  }\n}\n\nfunction heightBalancedBinaryTree(tree) {\n  // Write your code here.\n  return false;\n}\n\n// Do not edit the lines below.\nexports.BinaryTree = BinaryTree;\nexports.heightBalancedBinaryTree = heightBalancedBinaryTree;\n\n\n")),(0,i.kt)("details",null,(0,i.kt)("summary",null,"\ud83d\udc68\u200d\ud83d\udd2c Javascript Solution"),(0,i.kt)("div",null,(0,i.kt)("p",null,(0,i.kt)("img",{src:n(9434).Z,width:"1188",height:"784"})),(0,i.kt)("iframe",{width:"380",height:"420",src:"https://www.youtube.com/embed/ofSsDWpqfZo",title:"YouTube video player",frameborder:"0",allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture",allowfullscreen:"true"}),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"class BinaryTree {\n    constructor(value) {\n        this.value = value;\n        this.left = null;\n        this.right = null;\n    }\n}\n\nclass TreeInfo {\n    constructor(isBalanced, height) {\n        this.isBalanced = isBalanced;\n        this.height = height;\n    }\n}\n\nfunction heightBalancedBinaryTree(tree) {\n    const treeInfo = getTreeInfo(tree);\n    return treeInfo.isBalanced;\n}\n\nfunction getTreeInfo(node) {\n    if (node === null) return new TreeInfo(true, -1);\n    const leftSubtreeInfo = getTreeInfo(node.left);\n    const rightSubtreeInfo = getTreeInfo(node.right);\n\n    const isBalanced = leftSubtreeInfo.isBalanced && rightSubtreeInfo.isBalanced && Math.abs(leftSubtreeInfo.height - rightSubtreeInfo.height) <=1;\n    const height = Math.max(leftSubtreeInfo.height, rightSubtreeInfo.height) + 1;\n    return new TreeInfo(isBalanced, height);\n\n}\n// Do not edit the lines below.\nexports.BinaryTree = BinaryTree;\nexports.heightBalancedBinaryTree = heightBalancedBinaryTree;\n\n}\n\n")))),(0,i.kt)("h2",{id:"19----max-subset-sum-no-adjacent"},"19 -  Max Subset Sum No Adjacent"),(0,i.kt)("p",null,"Write a function that takes in an array of positive integers and returns the maximum sum of non-adjacent elements in the array."),(0,i.kt)("p",null,(0,i.kt)("img",{src:n(8428).Z,width:"644",height:"248"})),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Starter Code")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"\nfunction maxSubsetSumNoAdjacent(array) {\n  // Write your code here.\n}\n\n")),(0,i.kt)("details",null,(0,i.kt)("summary",null,"\ud83d\udc68\u200d\ud83d\udd2c Javascript Solution"),(0,i.kt)("div",null,(0,i.kt)("p",null,(0,i.kt)("img",{src:n(9434).Z,width:"1188",height:"784"})),(0,i.kt)("iframe",{width:"380",height:"420",src:"https://www.youtube.com/embed/9kDaGmTZhVI",title:"YouTube video player",frameborder:"0",allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture",allowfullscreen:"true"}),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"function maxSubsetSumNoAdjacent(array) {\n    if (!array.length) return 0;\n    if (array.length === 1) return array[0];\n\n    const maxSums = array.slice();\n    maxSums[1] = Math.max(array[0], array[1]);\n    for (let i = 2; i < array.length; i++) {\n        maxSums[i] = Math.max(maxSums[i - 1], maxSums[i - 2] + array[i]);\n    }\n    return maxSums[maxSums.length - 1];\n}\n\n\n")))),(0,i.kt)("h2",{id:"20----number-of-ways-to-make-change"},"20 -  Number of Ways to Make Change"),(0,i.kt)("p",null,"Given an array of distinc positive integers representing coin denominations and a single non-negative integer ",(0,i.kt)("inlineCode",{parentName:"p"},"n")," representing a target amount of money, write a function that returns the number of ways to make change for that target amount using hte given coin denominations."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Note that an unlimited amount of coins is at your disposal")),(0,i.kt)("p",null,(0,i.kt)("img",{src:n(2334).Z,width:"664",height:"421"})),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Starter Code")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"\nfunction numberOfWaysToMakeChange(n, denoms) {\n  // Write your code here.\n}\n\n\n")),(0,i.kt)("details",null,(0,i.kt)("summary",null,"\ud83d\udc68\u200d\ud83d\udd2c Javascript Solution"),(0,i.kt)("div",null,(0,i.kt)("iframe",{width:"380",height:"420",src:"https://www.youtube.com/embed/mSCleaTGP2Q",title:"YouTube video player",frameborder:"0",allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture",allowfullscreen:"true"}),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"\nfunction numberOfWaysToMakeChange(n, denoms) {\n    const ways = new Array(n + 1).fill(0);\n    ways[0] = 1;\n    for (let denom of denoms) {\n        for (let amount = 1; amount < n + 1; amount++) {\n            if (denom <= amount) ways[amount] += ways[amount - denom];\n        }\n    }\n    return ways[n];\n\n}\n\n}\n\n")))),(0,i.kt)("h2",{id:"21----min-number-of-coins-for-change"},"21 -  Min Number of Coins for Change"),(0,i.kt)("p",null,"Given an Array of Positive single non-negative integer ",(0,i.kt)("inlineCode",{parentName:"p"},"n")," representing a target amount of money, wirte a function..."),(0,i.kt)("p",null,(0,i.kt)("img",{src:n(6673).Z,width:"786",height:"538"})),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Starter Code")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"starter Code\n\n")),(0,i.kt)("details",null,(0,i.kt)("summary",null,"\ud83d\udc68\u200d\ud83d\udd2c Javascript Solution"),(0,i.kt)("div",null,(0,i.kt)("p",null,(0,i.kt)("img",{src:n(9434).Z,width:"1188",height:"784"})),(0,i.kt)("iframe",{width:"380",height:"420",src:"https://www.youtube.com/embed/9kDaGmTZhVI",title:"YouTube video player",frameborder:"0",allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture",allowfullscreen:"true"}),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"Solution Code\n}\n\n")))),(0,i.kt)("h2",{id:"22----levenshtein-distance"},"22 -  Levenshtein Distance"),(0,i.kt)("p",null,"Write a function that takes in two strings and returns the minimum number of edit operations that need to be performed on the first string to obtain the second string."),(0,i.kt)("p",null,"There are three edit operations: "),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Insertion fo a character"),(0,i.kt)("li",{parentName:"ul"},"Deletion of a character"),(0,i.kt)("li",{parentName:"ul"},"Substitution of a character")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"How I would solve this")),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Try computing all potential changes from abc and yabd"),(0,i.kt)("li",{parentName:"ol"})),(0,i.kt)("p",null,(0,i.kt)("img",{src:n(4553).Z,width:"540",height:"397"})),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Starter Code")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"\n\nfunction levenshteinDistance(str1, str2) {\n\n}\n\n\n")),(0,i.kt)("details",null,(0,i.kt)("summary",null,"\ud83d\udc68\u200d\ud83d\udd2c Javascript Solution"),(0,i.kt)("div",null,(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"We can create a table to compare which is the distance between them")),(0,i.kt)("iframe",{width:"380",height:"420",src:"https://www.youtube.com/embed/8V1q-eT2NoQ",title:"YouTube video player",frameborder:"0",allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture",allowfullscreen:"true"}),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"\nfunction levenshteinDistance(str1, str2) {\n    const edits = [];\n    for (let i = 0; i < str2.length + 1; i++) {\n        const row = [];\n        for (let j = 0; j < str1.length + 1; j++) {\n            row.push(j);\n        }\n\n        row[0] = i;\n        edits.push(row);\n    }\n\n    for (let i = 1; i < str2.length + 1; i++) {\n        for (let j = 1; j < str1.length + 1; j++) {\n            if (str2[i - 1] === str1[j - 1]) {\n                edits[i][j] = edits[i - 1][j - 1];\n            } else {\n                edits[i][j] = 1 + Math.min(edits[i - 1][j - 1], edits[i - 1][j], edits[i][j - 1]);\n            }\n        }\n    }\n    return edits[str2.length][str1.length];\n\n}\n\n// Do not edit the line below.\nexports.levenshteinDistance = levenshteinDistance;\n\n")))),(0,i.kt)("h2",{id:"23----kadanes-algorithm"},"23 -  Kadane's Algorithm"),(0,i.kt)("p",null,"Description"),(0,i.kt)("p",null,(0,i.kt)("img",{src:n(6673).Z,width:"786",height:"538"})),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Starter Code")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"starter Code\n\n")),(0,i.kt)("details",null,(0,i.kt)("summary",null,"\ud83d\udc68\u200d\ud83d\udd2c Javascript Solution"),(0,i.kt)("div",null,(0,i.kt)("p",null,(0,i.kt)("img",{src:n(9434).Z,width:"1188",height:"784"})),(0,i.kt)("iframe",{width:"380",height:"420",src:"https://www.youtube.com/embed/9kDaGmTZhVI",title:"YouTube video player",frameborder:"0",allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture",allowfullscreen:"true"}),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"Solution Code\n}\n\n")))),(0,i.kt)("h2",{id:"24----single-cycle-check"},"24 -  Single Cycle Check"),(0,i.kt)("p",null,"Description"),(0,i.kt)("p",null,(0,i.kt)("img",{src:n(6673).Z,width:"786",height:"538"})),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Starter Code")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"starter Code\n\n")),(0,i.kt)("details",null,(0,i.kt)("summary",null,"\ud83d\udc68\u200d\ud83d\udd2c Javascript Solution"),(0,i.kt)("div",null,(0,i.kt)("p",null,(0,i.kt)("img",{src:n(9434).Z,width:"1188",height:"784"})),(0,i.kt)("iframe",{width:"380",height:"420",src:"https://www.youtube.com/embed/9kDaGmTZhVI",title:"YouTube video player",frameborder:"0",allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture",allowfullscreen:"true"}),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"Solution Code\n}\n\n")))))}h.isMDXComponent=!0},6673:function(e,t,n){t.Z=n.p+"assets/images/2022-05-06-15-44-28-c64c899f78f902b0291783bffd0c2ba2.png"},9434:function(e,t,n){t.Z=n.p+"assets/images/2022-06-12-02-17-29-8012fe120d2ce3e3ef0b8857006a64ac.png"},9374:function(e,t,n){t.Z=n.p+"assets/images/2022-06-12-11-26-16-d6e4cc5e51d4a6512d000c4e380ee651.png"},6249:function(e,t,n){t.Z=n.p+"assets/images/2022-06-12-11-57-43-66285597e733cb340e9cc6fbca247e10.png"},9300:function(e,t,n){t.Z=n.p+"assets/images/2022-06-12-12-00-37-5e00f62960dc54e37345e88c553bff14.png"},5596:function(e,t,n){t.Z=n.p+"assets/images/2022-06-13-22-14-45-e752020bdb0ef4e25aa96ea270f18490.png"},6397:function(e,t,n){t.Z=n.p+"assets/images/2022-06-23-01-36-11-696290011b7169c8d177c1d1819770c0.png"},8428:function(e,t,n){t.Z=n.p+"assets/images/2022-06-23-02-40-44-be0e979703eed3a8d100a2f8594208a9.png"},2334:function(e,t,n){t.Z=n.p+"assets/images/2022-06-25-22-43-52-75ab786c47cff879149b4b57c9368d15.png"},4553:function(e,t,n){t.Z=n.p+"assets/images/2022-06-29-01-20-53-5443bbf7654a960ec133141ba2e91772.png"}}]);