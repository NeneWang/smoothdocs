"use strict";(self.webpackChunksmoothdocs=self.webpackChunksmoothdocs||[]).push([[6145],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return p}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var u=r.createContext({}),o=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=o(e.components);return r.createElement(u.Provider,{value:t},e.children)},h={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,u=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=o(n),p=a,f=d["".concat(u,".").concat(p)]||d[p]||h[p]||i;return n?r.createElement(f,l(l({ref:t},c),{},{components:n})):r.createElement(f,l({ref:t},c))}));function p(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,l=new Array(i);l[0]=d;var s={};for(var u in t)hasOwnProperty.call(t,u)&&(s[u]=t[u]);s.originalType=e,s.mdxType="string"==typeof e?e:a,l[1]=s;for(var o=2;o<i;o++)l[o]=n[o];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},43:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return u},default:function(){return p},frontMatter:function(){return s},metadata:function(){return o},toc:function(){return h}});var r=n(7462),a=n(3366),i=(n(7294),n(3905)),l=["components"],s={sidebar_position:2,title:"Mid algorithm Questions"},u="Medium Algorithms Questions",o={unversionedId:"Computer Science/algorithms-questions-mid",id:"Computer Science/algorithms-questions-mid",title:"Mid algorithm Questions",description:"Longest Peak",source:"@site/resources/Computer Science/algorithms-questions-mid.md",sourceDirName:"Computer Science",slug:"/Computer Science/algorithms-questions-mid",permalink:"/resources/Computer Science/algorithms-questions-mid",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,title:"Mid algorithm Questions"},sidebar:"tutorialSidebar",previous:{title:"Resume Building",permalink:"/resources/resume"}},c={},h=[{value:"Longest Peak",id:"longest-peak",level:2},{value:"Array of Products",id:"array-of-products",level:2},{value:"First Duplicate Value",id:"first-duplicate-value",level:2},{value:"Merge Overlapping Intervals",id:"merge-overlapping-intervals",level:2},{value:"BST Contruction",id:"bst-contruction",level:2},{value:"Validate BST",id:"validate-bst",level:2},{value:"BST Traversal",id:"bst-traversal",level:2},{value:"Min Height BST",id:"min-height-bst",level:2},{value:"Longest Peak",id:"longest-peak-1",level:2},{value:"Longest Peak",id:"longest-peak-2",level:2}],d={toc:h};function p(e){var t=e.components,s=(0,a.Z)(e,l);return(0,i.kt)("wrapper",(0,r.Z)({},d,s,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"medium-algorithms-questions"},"Medium Algorithms Questions"),(0,i.kt)("h2",{id:"longest-peak"},"Longest Peak"),(0,i.kt)("p",null,"Write a function that takes in an array of integers and returns the length of\nthe longest peak in the array.\n",(0,i.kt)("img",{src:n(648).Z,width:"837",height:"339"})),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Javascript Solution"),(0,i.kt)("div",null,(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"function longestPeak(array) {\n    let longestPeakLength = 0;\n    let i = 1;\n\n    while (i < array.length - 1) {\n        const isPeak = array[i - 1] < array[i] && array[i + 1] < array[i];\n        if (!isPeak) {\n            i++;\n            continue;\n        }\n\n        let leftIdx = i - 2;\n        while (leftIdx >= 0 && array[leftIdx] < array[leftIdx + 1]) {\n            leftIdx--;\n        }\n\n        let rightIdx = i + 2;\n        while (rightIdx < array.length && array[rightIdx] < array[rightIdx - 1]) {\n            rightIdx++;\n        }\n\n         const currentLongest = rightIdx - leftIdx - 1;\n        longestPeakLength = Math.max(currentLongest, longestPeakLength);\n        i = rightIdx;\n\n    }\n\n    return longestPeakLength;\n\n}\n\n")))),(0,i.kt)("h2",{id:"array-of-products"},"Array of Products"),(0,i.kt)("p",null,"Write a function that takes in an array of integers and ran array of the same\nlength, where each element in the output array is equal to the product of every\nother number in the input array\n",(0,i.kt)("img",{src:n(2738).Z,width:"839",height:"349"})),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Javascript Solution"),(0,i.kt)("div",null,(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"\nfunction arrayOfProducts(array) {\n    const products = [];\n\n    for (let i = 0; i < array.length; i++) {\n        let runningProduct = 1;\n        for (let j = 0; j < array.length; j++) {\n            if(i!==j){\n                runningProduct *= array[j];\n            }\n            products[i] = runningProduct;\n        }\n    }\n    return products;\n}\n// Do not edit the line below.\nexports.arrayOfProducts = arrayOfProducts;\n\n")),(0,i.kt)("p",null,"o(n) solution"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"function arrayOfProducts(array){\n    const products = new Array(array.length).fill(1);\n\n    let leftRunningProduct = 1;\n    for(let i=0; i<array.length; i++){\n        products[i] = leftRunningProduct;\n        leftRunningProduct *= array[i];\n    }\n\n    let rightRunningProduct = 1;\n    for(let i=array.length -1 ; i>=0;i--){\n        products[i] *= rightRunningProduct;\n        rightRunningProduct *= array[i];\n    }\n\n    return products;\n\n}\n")))),(0,i.kt)("h2",{id:"first-duplicate-value"},"First Duplicate Value"),(0,i.kt)("p",null,"Given an array of integers between ",(0,i.kt)("inlineCode",{parentName:"p"},"a")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"n"),", inclusive, where ",(0,i.kt)("inlineCode",{parentName:"p"},"n")," is the\nlength of the array, write a function that returns the first integer that\nappears more than once. (when the array is read from left to right)"),(0,i.kt)("p",null,(0,i.kt)("img",{src:n(8274).Z,width:"833",height:"550"})),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Javascript Solution"),(0,i.kt)("div",null,(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"function firstDuplicateValue(array) {\n    for (const value of array) {\n        const absValue = Math.abs(value);\n        if (array[absValue - 1] < 0) return absValue;\n        array[absValue - 1] *= -1;\n\n    }\n    return -1;\n}\n\n")))),(0,i.kt)("h2",{id:"merge-overlapping-intervals"},"Merge Overlapping Intervals"),(0,i.kt)("p",null,"Write a function that takes in a non-empty array of arbitrary intervals, merges\nany overalapping intervals, and returns the new intervals in no particular order."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"details",src:n(863).Z,width:"836",height:"409"})),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Javascript Solution"),(0,i.kt)("div",null,(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"function mergeOverlappingIntervals(intervals) {\n    const sortedIntervals = intervals.sort((a, b) => a[0] - b[0]);\n\n    const mergedIntervals = [];\n    let currentInterval = sortedIntervals[0];\n    mergedIntervals.push(currentInterval);\n\n    for (const nextInterval of sortedIntervals) {\n        const [_, currentIntervalEnd] = currentInterval;\n        const [nextIntervalStart, nextIntervalEnd] = nextInterval;\n\n        if(currentIntervalEnd >= nextIntervalStart) currentInterval[1] = Math.max(currentIntervalEnd, nextIntervalEnd)\n        else{\n            currentInterval = nextInterval;\n            mergedIntervals.push(currentInterval);\n        }\n    }\n    return mergedIntervals;\n}\n\n")))),(0,i.kt)("h2",{id:"bst-contruction"},"BST Contruction"),(0,i.kt)("p",null,"Write a BST Class that supports ",(0,i.kt)("inlineCode",{parentName:"p"},"insert"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"remove"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"contains")," method\n",(0,i.kt)("img",{src:n(7091).Z,width:"884",height:"786"})),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Javascript Solution"),(0,i.kt)("div",null,(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"class BST {\n    constructor(value) {\n        this.value = value;\n        this.left = null;\n        this.right = null;\n    }\n\n    insert(value) {\n        // Write your code here.\n        // Do not edit the return statement of this method.\n        if (value < this.value) {\n            if (this.left === null) {\n                this.left = new BST(value);\n            } else {\n                this.left.insert(value);\n            }\n        } else {\n            if (this.right === null) {\n                this.right = new BST(value);\n            } else {\n                this.right.insert(value);\n            }\n        }\n\n\n        return this;\n    }\n\n    contains(value) {\n        // Write your code here.\n        if (value < this.value) {\n            if (this.left === null) {\n                return false;\n            } else {\n                return this.left.contains(value);\n            }\n        } else if (value > this.value) {\n            if (this.right === null) {\n                return false;\n            } else {\n                return this.right.contains(value);\n            }\n        } else {\n            return (true);\n        }\n    }\n\n    remove(value, parent = null) {\n        if (value < this.value) {\n            if (this.left !== null) {\n                this.left.remove(value, this);\n            }\n        } else if (value > this.value) {\n            if (this.right !== null) {\n                this.right.remove(value, this);\n            }\n        } else {\n            if (this.left !== null && this.right !== null) {\n                this.value = this.right.getMinValue();\n                this.right.remove(this.value, this);\n            } else if (parent === null) {\n                if (this.left !== null) {\n                    this.value = this.left.value;\n                    this.right = this.left.right;\n                    this.left = this.left.left;\n                } else if (this.right !== null) {\n                    this.value = this.right.value;\n                    this.left = this.right.left;\n                    this.right = this.right.right;\n                } else {\n                    \n                }\n            } else if (parent.left === this) {\n                parent.left = this.left !== null ? this.left : this.right;\n            } else if (parent.right === this) {\n                parent.right = this.left !== null ? this.left : this.right;\n            }\n        }\n        return this;\n    }\n\n    getMinValue() {\n        if (this.left == null) {\n            return this.value;\n        } else {\n            return this.left.getMinValue();\n        }\n    }\n}\n\n// Do not edit the line below.\nexports.BST = BST;\n\n")))),(0,i.kt)("h2",{id:"validate-bst"},"Validate BST"),(0,i.kt)("p",null,"Write a function that takes in a potentially invalid Binary Search Tree (BST)\nand returns a boolean representing whther the BST is valid.\n",(0,i.kt)("img",{src:n(2388).Z,width:"890",height:"433"})),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Javascript Solution"),(0,i.kt)("div",null,(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"class BST {\n    constructor(value) {\n        this.value = value;\n        this.left = null;\n        this.right = null;\n    }\n}\n\nfunction validateBst(tree) {\n    // Write your code here.\n    return validateBstHelper(tree, -Infinity, Infinity);\n}\n\n\nfunction validateBstHelper(tree, minValue, maxValue) {\n    if (tree === null) return true;\n    if (tree.value < minValue || tree.value >= maxValue) return false;\n    const leftIsValid = validateBstHelper(tree.left, minValue, tree.value);\n    return leftIsValid && validateBstHelper(tree.right, tree.value, maxValue);\n\n\n}\n")))),(0,i.kt)("h2",{id:"bst-traversal"},"BST Traversal"),(0,i.kt)("p",null,"Write three functions that take in a Binary Search Tree (BST) and an empty\narray, traverse the BST, add its nodes' values to the input array, and returns\nthat array. The three functions should traverse the BST using the in-order,\npre-order, and post-order tree-traversal techniques, respectively."),(0,i.kt)("p",null,(0,i.kt)("img",{src:n(595).Z,width:"891",height:"386"})),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Javascript Solution"),(0,i.kt)("div",null,(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"function inOrderTraverse(tree, array) {\n    // Write your code here.\n    if (tree !== null) {\n        inOrderTraverse(tree.left, array);\n        array.push(tree.value);\n        inOrderTraverse(tree.right, array);\n    }\n    return array;\n\n}\n\nfunction preOrderTraverse(tree, array) {\n    // Write your code here.\n    if (tree !== null) {\n        array.push(tree.value);\n        preOrderTraverse(tree.left, array);\n        preOrderTraverse(tree.right, array);\n\n    }\n    return array;\n}\n\nfunction postOrderTraverse(tree, array) {\n    // Write your code here.\n    if (tree !== null) {\n        postOrderTraverse(tree.left, array);\n        postOrderTraverse(tree.right, array);\n        array.push(tree.value);\n    }\n    return array;\n}\n")))),(0,i.kt)("h2",{id:"min-height-bst"},"Min Height BST"),(0,i.kt)("p",null,"Write a function that takes in a non-empty sorted array of distinct integers,\ncontructs a BST from the integers, and returns the root of the BST\n",(0,i.kt)("img",{src:n(1662).Z,width:"1029",height:"753"})),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Javascript Solution"),(0,i.kt)("div",null,(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"function minHeightBst(array) {\n    // Write your code here.\n    return constructMinHeightBst(array, null, 0, array.length - 1);\n}\n\nfunction constructMinHeightBst(array, bst, startIdx, endIdx) {\n    if (endIdx < startIdx) return;\n    const midIdx = Math.floor((startIdx + endIdx) / 2);\n    const valueToAdd = array[midIdx];\n    if (bst === null) {\n        bst = new BST(valueToAdd);\n    } else {\n        bst.insert(valueToAdd);\n    }\n\n    constructMinHeightBst(array, bst, startIdx, midIdx - 1);\n    constructMinHeightBst(array, bst, midIdx + 1, endIdx);\n    return bst;\n}\n\nclass BST {\n  constructor(value) {\n    this.value = value;\n    this.left = null;\n    this.right = null;\n  }\n\n  insert(value) {\n    if (value < this.value) {\n      if (this.left === null) {\n        this.left = new BST(value);\n      } else {\n        this.left.insert(value);\n      }\n    } else {\n      if (this.right === null) {\n        this.right = new BST(value);\n      } else {\n        this.right.insert(value);\n      }\n    }\n  }\n}\n\n")))),(0,i.kt)("h2",{id:"longest-peak-1"},"Longest Peak"),(0,i.kt)("p",null,"Write a function that takes in an array of integers and returns the length of\nthe longest peak in the array.\n",(0,i.kt)("img",{src:n(3005).Z,width:"673",height:"348"})),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Javascript Solution"),(0,i.kt)("div",null,(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"")))),(0,i.kt)("h2",{id:"longest-peak-2"},"Longest Peak"),(0,i.kt)("p",null,"Write a function that takes in an array of integers and returns the length of\nthe longest peak in the array.\n",(0,i.kt)("img",{src:n(3005).Z,width:"673",height:"348"})),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Javascript Solution"),(0,i.kt)("div",null,(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"")))))}p.isMDXComponent=!0},3005:function(e,t,n){t.Z=n.p+"assets/images/2022-04-18-17-07-54-92a8722a202b602fbf67c650e8a28f5a.png"},8274:function(e,t,n){t.Z=n.p+"assets/images/2022-04-18-18-21-15-a5634cb90fbf1540e0f6b7878bb0949f.png"},648:function(e,t,n){t.Z=n.p+"assets/images/2022-04-18-18-22-04-8b966d1292e319b9d4ed2e8b9a7bf9c3.png"},2738:function(e,t,n){t.Z=n.p+"assets/images/2022-04-18-18-22-56-c9ceb233e81aefed11806c97a9ec6281.png"},863:function(e,t,n){t.Z=n.p+"assets/images/2022-04-18-18-36-02-4cae1b5588080a7fe072af441f6bf855.png"},7091:function(e,t,n){t.Z=n.p+"assets/images/2022-04-18-18-53-45-95acebb057784e245b0b05254300c778.png"},2388:function(e,t,n){t.Z=n.p+"assets/images/2022-04-19-01-51-02-bca686b2d0330b2d0bf5b69f638ff87e.png"},595:function(e,t,n){t.Z=n.p+"assets/images/2022-04-19-01-58-34-db74c1a4f235d0016487c33edfdd2721.png"},1662:function(e,t,n){t.Z=n.p+"assets/images/2022-04-20-22-58-09-40d5a988f2f0ce34fc20e78e90b3ba2c.png"}}]);