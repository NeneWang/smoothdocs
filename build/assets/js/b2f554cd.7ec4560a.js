"use strict";(self.webpackChunksmoothdocs=self.webpackChunksmoothdocs||[]).push([[1477],{10:function(r){r.exports=JSON.parse('{"blogPosts":[{"id":"/2022/04/18/leetcode-programming-algorithms","metadata":{"permalink":"/blog/2022/04/18/leetcode-programming-algorithms","editUrl":"https://github.com/NeneWang/smoothdocs/tree/master/blog/2022-04-18-leetcode-programming-algorithms.md","source":"@site/blog/2022-04-18-leetcode-programming-algorithms.md","title":"Leetcode Algorithms Answers","description":"This blog post eventually will have my answers to all provided interview","date":"2022-04-18T00:00:00.000Z","formattedDate":"April 18, 2022","tags":[{"label":"my-answers","permalink":"/blog/tags/my-answers"},{"label":"white-board","permalink":"/blog/tags/white-board"},{"label":"algorithms","permalink":"/blog/tags/algorithms"},{"label":"algortihms-medium","permalink":"/blog/tags/algortihms-medium"}],"readingTime":0.285,"truncated":false,"authors":[{"name":"Nelson Wang","title":"Computer Science Student","url":"https://github.com/NeneWang","imageURL":"https://avatars.githubusercontent.com/u/29577570?v=4","key":"nelson"}],"frontMatter":{"title":"Leetcode Algorithms Answers","authors":"nelson","tags":["my-answers","white-board","algorithms","algortihms-medium"]},"nextItem":{"title":"Upcoming Features","permalink":"/blog/2022/04/18/upcoming-features"}},"content":":::caution Blog Post In Progress\\r\\nThis blog post eventually will have my answers to all provided interview\\r\\nquestions. However for the moment, it just here for demo purposes...\\r\\n\\r\\nYou can see the [trello board of the progress made here](https://trello.com/b/GBKwqnA8/learning-through-projects)\\r\\n\\r\\n:::\\r\\n\\r\\n:::tip How to treat this post.\\r\\nI will be posting some answers for Leetcode algorithm questions.\\r\\n:::"},{"id":"/2022/04/18/upcoming-features","metadata":{"permalink":"/blog/2022/04/18/upcoming-features","editUrl":"https://github.com/NeneWang/smoothdocs/tree/master/blog/2022-04-18-upcoming-features.md","source":"@site/blog/2022-04-18-upcoming-features.md","title":"Upcoming Features","description":"- Blogging Admin: Allow people to create their own blogpost.","date":"2022-04-18T00:00:00.000Z","formattedDate":"April 18, 2022","tags":[{"label":"dev-blog","permalink":"/blog/tags/dev-blog"}],"readingTime":0.505,"truncated":false,"authors":[{"name":"Nelson Wang","title":"Computer Science Student","url":"https://github.com/NeneWang","imageURL":"https://avatars.githubusercontent.com/u/29577570?v=4","key":"nelson"}],"frontMatter":{"title":"Upcoming Features","authors":"nelson","tags":["dev-blog"]},"prevItem":{"title":"Leetcode Algorithms Answers","permalink":"/blog/2022/04/18/leetcode-programming-algorithms"},"nextItem":{"title":"Easy Algorithms Answers","permalink":"/blog/2022/04/17/easy-programming-algorithms"}},"content":":::tip Upcoming Features\\r\\n- Blogging Admin: Allow people to create their own blogpost.\\r\\n- Random questions generator\\r\\n- Better Computer Science interview questions\\r\\n:::\\r\\n\\r\\n<details>\\r\\n<summary>\\r\\nUpcoming Content\\r\\n</summary>\\r\\n\\r\\n*This is limited to this bloggers area of experitize and or interests, if you\\r\\nwant some specific upcoming content you can email to wangnelson2@gmail.com or\\r\\nposting your own once the blogging admin feature is realeased*\\r\\n\\r\\n- System Design Interview Questions\\r\\n- Data Science Interview Questions\\r\\n- Cyber Security Interview Questions\\r\\n- Marketing Interview Questions\\r\\n- Business Case Interview Questions\\r\\n- Product Management Interview Questions\\r\\n- Consultancy Interview Questions\\r\\n- Mechanical Engineering\\r\\n\\r\\n\\r\\n</details>"},{"id":"/2022/04/17/easy-programming-algorithms","metadata":{"permalink":"/blog/2022/04/17/easy-programming-algorithms","editUrl":"https://github.com/NeneWang/smoothdocs/tree/master/blog/2022-04-17-easy-programming-algorithms.md","source":"@site/blog/2022-04-17-easy-programming-algorithms.md","title":"Easy Algorithms Answers","description":"This blog post eventually will have my answers to all provided interview","date":"2022-04-17T00:00:00.000Z","formattedDate":"April 17, 2022","tags":[{"label":"my-answers","permalink":"/blog/tags/my-answers"},{"label":"white-board","permalink":"/blog/tags/white-board"},{"label":"algorithms","permalink":"/blog/tags/algorithms"},{"label":"algortihms-easy","permalink":"/blog/tags/algortihms-easy"}],"readingTime":0.23,"truncated":false,"authors":[{"name":"Nelson Wang","title":"Computer Science Student","url":"https://github.com/NeneWang","imageURL":"https://avatars.githubusercontent.com/u/29577570?v=4","key":"nelson"}],"frontMatter":{"title":"Easy Algorithms Answers","authors":"nelson","tags":["my-answers","white-board","algorithms","algortihms-easy"]},"prevItem":{"title":"Upcoming Features","permalink":"/blog/2022/04/18/upcoming-features"},"nextItem":{"title":"Hard Algorithms Answers","permalink":"/blog/2022/04/17/hard-programming-algorithms"}},"content":":::caution Blog Post In Progress\\r\\nThis blog post eventually will have my answers to all provided interview\\r\\nquestions. However for the moment, it just here for demo purposes...\\r\\n:::\\r\\n\\r\\n:::tip How to treat this post.\\r\\nI will be posting some answers for easy algorithm questions.\\r\\n:::"},{"id":"/2022/04/17/hard-programming-algorithms","metadata":{"permalink":"/blog/2022/04/17/hard-programming-algorithms","editUrl":"https://github.com/NeneWang/smoothdocs/tree/master/blog/2022-04-17-hard-programming-algorithms.md","source":"@site/blog/2022-04-17-hard-programming-algorithms.md","title":"Hard Algorithms Answers","description":"This blog post eventually will have my answers to all provided interview","date":"2022-04-17T00:00:00.000Z","formattedDate":"April 17, 2022","tags":[{"label":"my-answers","permalink":"/blog/tags/my-answers"},{"label":"white-board","permalink":"/blog/tags/white-board"},{"label":"algorithms","permalink":"/blog/tags/algorithms"},{"label":"algortihms-hard","permalink":"/blog/tags/algortihms-hard"}],"readingTime":0.23,"truncated":false,"authors":[{"name":"Nelson Wang","title":"Computer Science Student","url":"https://github.com/NeneWang","imageURL":"https://avatars.githubusercontent.com/u/29577570?v=4","key":"nelson"}],"frontMatter":{"title":"Hard Algorithms Answers","authors":"nelson","tags":["my-answers","white-board","algorithms","algortihms-hard"]},"prevItem":{"title":"Easy Algorithms Answers","permalink":"/blog/2022/04/17/easy-programming-algorithms"},"nextItem":{"title":"Medium Algorithms Answers","permalink":"/blog/2022/04/17/mid-programming-algorithms"}},"content":":::caution Blog Post In Progress\\r\\nThis blog post eventually will have my answers to all provided interview\\r\\nquestions. However for the moment, it just here for demo purposes...\\r\\n:::\\r\\n\\r\\n:::tip How to treat this post.\\r\\nI will be posting some answers for Hard algorithm questions.\\r\\n:::"},{"id":"/2022/04/17/mid-programming-algorithms","metadata":{"permalink":"/blog/2022/04/17/mid-programming-algorithms","editUrl":"https://github.com/NeneWang/smoothdocs/tree/master/blog/2022-04-17-mid-programming-algorithms.md","source":"@site/blog/2022-04-17-mid-programming-algorithms.md","title":"Medium Algorithms Answers","description":"This blog post eventually will have my answers to all provided interview","date":"2022-04-17T00:00:00.000Z","formattedDate":"April 17, 2022","tags":[{"label":"my-answers","permalink":"/blog/tags/my-answers"},{"label":"white-board","permalink":"/blog/tags/white-board"},{"label":"algorithms","permalink":"/blog/tags/algorithms"},{"label":"algortihms-medium","permalink":"/blog/tags/algortihms-medium"}],"readingTime":6.455,"truncated":false,"authors":[{"name":"Nelson Wang","title":"Computer Science Student","url":"https://github.com/NeneWang","imageURL":"https://avatars.githubusercontent.com/u/29577570?v=4","key":"nelson"}],"frontMatter":{"title":"Medium Algorithms Answers","authors":"nelson","tags":["my-answers","white-board","algorithms","algortihms-medium"]},"prevItem":{"title":"Hard Algorithms Answers","permalink":"/blog/2022/04/17/hard-programming-algorithms"},"nextItem":{"title":"Nelson\'s Behavioural Answers","permalink":"/blog/2022/04/16/myanswers"}},"content":":::caution Blog Post In Progress\\r\\nThis blog post eventually will have my answers to all provided interview\\r\\nquestions. However for the moment, it just here for demo purposes...\\r\\n\\r\\n\\r\\nYou can see the [trello board of the progress made here](https://trello.com/b/GBKwqnA8/learning-through-projects)\\r\\n\\r\\n:::\\r\\n\\r\\n:::tip How to treat this post.\\r\\nI will be posting some answers for easy algorithm questions.\\r\\n:::\\r\\n\\r\\n\\r\\n\\r\\n## Longest Peak\\r\\nWrite a function that takes in an array of integers and returns the length of\\r\\nthe longest peak in the array.\\r\\n![](/img/2022-04-18-17-07-54.png)\\r\\n<details>\\r\\n<summary>\\r\\n Javascript Solution\\r\\n</summary>\\r\\n\\r\\nAs you can see you first fit the the peak, and then start extending the peak\\r\\nsides (That\'s whjy it starts from the left to the right. which goes increasing\\r\\nor decreasing)\\r\\n\\r\\n![](/img/2022-04-18-17-17-44.png)\\r\\n<div>\\r\\n\\r\\n\\r\\n```javascript\\r\\nfunction longestPeak(array) {\\r\\n    let longestPeakLength = 0;\\r\\n    let i = 1;\\r\\n\\r\\n    while (i < array.length - 1) {\\r\\n        const isPeak = array[i - 1] < array[i] && array[i + 1] < array[i];\\r\\n        if (!isPeak) {\\r\\n            i++;\\r\\n            continue;\\r\\n        }\\r\\n\\r\\n        let leftIdx = i - 2;\\r\\n        while (leftIdx >= 0 && array[leftIdx] < array[leftIdx + 1]) {\\r\\n            leftIdx--;\\r\\n        }\\r\\n\\r\\n        let rightIdx = i + 2;\\r\\n        while (rightIdx < array.length && array[rightIdx] < array[rightIdx - 1]) {\\r\\n            rightIdx++;\\r\\n        }\\r\\n\\r\\n         const currentLongest = rightIdx - leftIdx - 1;\\r\\n        longestPeakLength = Math.max(currentLongest, longestPeakLength);\\r\\n        i = rightIdx;\\r\\n\\r\\n    }\\r\\n\\r\\n    return longestPeakLength;\\r\\n\\r\\n}\\r\\n\\r\\n```\\r\\n</div>\\r\\n</details>\\r\\n\\r\\n\\r\\n\\r\\n## Array of Products\\r\\nWrite a function that takes in an array of integers and ran array of the same\\r\\nlength, where each element in the output array is equal to the product of every\\r\\nother number in the input array\\r\\n\\r\\n![](/img/2022-04-18-17-28-38.png)\\r\\n<details>\\r\\n<summary>\\r\\n Javascript Solution\\r\\n</summary>\\r\\n\\r\\n<div>\\r\\n\\r\\n![](/img/2022-04-18-17-51-44.png)\\r\\n\\r\\nSO this solution is actually very simple, a nested loop with a ignore case if\\r\\nthe i = j so it skips multiplying tiself. \\r\\n\\r\\n\\r\\n```javascript\\r\\n\\r\\nfunction arrayOfProducts(array) {\\r\\n    const products = [];\\r\\n\\r\\n    for (let i = 0; i < array.length; i++) {\\r\\n        let runningProduct = 1;\\r\\n        for (let j = 0; j < array.length; j++) {\\r\\n            if(i!==j){\\r\\n                runningProduct *= array[j];\\r\\n            }\\r\\n            products[i] = runningProduct;\\r\\n        }\\r\\n    }\\r\\n    return products;\\r\\n}\\r\\n// Do not edit the line below.\\r\\nexports.arrayOfProducts = arrayOfProducts;\\r\\n\\r\\n```\\r\\n\\r\\nThe o(n) solution is a little more interesting, this one \\r\\no(n) solution bases on the following clue: we can get all the multiplication in\\r\\nthe right and the multiplications of all the values in the left we can get the\\r\\nmultiplication of all the values except for the one there:\\r\\n\\r\\n![](/img/2022-04-18-18-10-10.png)\\r\\n\\r\\n```javascript\\r\\nfunction arrayOfProducts(array){\\r\\n    const products = new Array(array.length).fill(1);\\r\\n\\r\\n    let leftRunningProduct = 1;\\r\\n    for(let i=0; i<array.length; i++){\\r\\n        products[i] = leftRunningProduct;\\r\\n        leftRunningProduct *= array[i];\\r\\n    }\\r\\n\\r\\n    let rightRunningProduct = 1;\\r\\n    for(let i=array.length -1 ; i>=0;i--){\\r\\n        products[i] *= rightRunningProduct;\\r\\n        rightRunningProduct *= array[i];\\r\\n    }\\r\\n\\r\\n    return products;\\r\\n\\r\\n}\\r\\n```\\r\\n</div>\\r\\n</details>\\r\\n\\r\\n\\r\\n\\r\\n## First Duplicate Value\\r\\nGiven an array of integers between `a` and `n`, inclusive, where `n` is the\\r\\nlength of the array, write a function that returns the first integer that\\r\\nappears more than once. (when the array is read from left to right)\\r\\n\\r\\n![](/img/2022-04-18-18-21-15.png)\\r\\n<details>\\r\\n<summary>\\r\\n Javascript Solution\\r\\n</summary>\\r\\n\\r\\n<div>\\r\\nThis happens because you can understand exclusivelly that the array perfectly matches the size of the a to n condition where the values cannot be larger than the array size.\\r\\nTherefore you can use that property to maximize the effeciency.\\r\\n\\r\\n![](/img/2022-04-18-18-33-30.png)\\r\\n\\r\\n```javascript\\r\\nfunction firstDuplicateValue(array) {\\r\\n    for (const value of array) {\\r\\n        const absValue = Math.abs(value);\\r\\n        if (array[absValue - 1] < 0) return absValue;\\r\\n        array[absValue - 1] *= -1;\\r\\n\\r\\n    }\\r\\n    return -1;\\r\\n}\\r\\n\\r\\n```\\r\\n</div>\\r\\n</details>\\r\\n\\r\\n\\r\\n## Merge Overlapping Intervals\\r\\n\\r\\nWrite a function that takes in a non-empty array of arbitrary intervals, merges\\r\\nany overalapping intervals, and returns the new intervals in no particular order.\\r\\n\\r\\n![details](/img/2022-04-18-18-36-02.png)\\r\\n<details>\\r\\n<summary>\\r\\n Javascript Solution\\r\\n</summary>\\r\\n\\r\\n<div>\\r\\n\\r\\n![](/img/2022-04-18-18-48-33.png)\\r\\n\\r\\nYou can see how the first interval always goes on the merge list, since her\\r\\nvalues can be modiyied given that it is an array.\\r\\n\\r\\n```javascript\\r\\nfunction mergeOverlappingIntervals(intervals) {\\r\\n    const sortedIntervals = intervals.sort((a, b) => a[0] - b[0]);\\r\\n\\r\\n    const mergedIntervals = [];\\r\\n    let currentInterval = sortedIntervals[0];\\r\\n    mergedIntervals.push(currentInterval);\\r\\n\\r\\n    for (const nextInterval of sortedIntervals) {\\r\\n        const [_, currentIntervalEnd] = currentInterval;\\r\\n        const [nextIntervalStart, nextIntervalEnd] = nextInterval;\\r\\n\\r\\n        if(currentIntervalEnd >= nextIntervalStart) currentInterval[1] = Math.max(currentIntervalEnd, nextIntervalEnd)\\r\\n        else{\\r\\n            currentInterval = nextInterval;\\r\\n            mergedIntervals.push(currentInterval);\\r\\n        }\\r\\n    }\\r\\n    return mergedIntervals;\\r\\n}\\r\\n\\r\\n```\\r\\n</div>\\r\\n</details>\\r\\n\\r\\n\\r\\n## BST Contruction\\r\\nWrite a BST Class that supports `insert`, `remove`, and `contains` method\\r\\n![](/img/2022-04-18-18-53-45.png)\\r\\n<details>\\r\\n<summary>\\r\\n Javascript Solution\\r\\n</summary>\\r\\n\\r\\n<div>\\r\\n\\r\\n- You can observe how the first insertion recursively calls itself if it finds\\r\\nthere is a value\\r\\n- Also how the contains values checks right and left and returns false, only\\r\\n  when it is null. It is optimized for binary search.\\r\\n- \\r\\n\\r\\n```javascript\\r\\nclass BST {\\r\\n    constructor(value) {\\r\\n        this.value = value;\\r\\n        this.left = null;\\r\\n        this.right = null;\\r\\n    }\\r\\n\\r\\n    insert(value) {\\r\\n        // Write your code here.\\r\\n        // Do not edit the return statement of this method.\\r\\n        if (value < this.value) {\\r\\n            if (this.left === null) {\\r\\n                this.left = new BST(value);\\r\\n            } else {\\r\\n                this.left.insert(value);\\r\\n            }\\r\\n        } else {\\r\\n            if (this.right === null) {\\r\\n                this.right = new BST(value);\\r\\n            } else {\\r\\n                this.right.insert(value);\\r\\n            }\\r\\n        }\\r\\n\\r\\n\\r\\n        return this;\\r\\n    }\\r\\n\\r\\n    contains(value) {\\r\\n        // Write your code here.\\r\\n        if (value < this.value) {\\r\\n            if (this.left === null) {\\r\\n                return false;\\r\\n            } else {\\r\\n                return this.left.contains(value);\\r\\n            }\\r\\n        } else if (value > this.value) {\\r\\n            if (this.right === null) {\\r\\n                return false;\\r\\n            } else {\\r\\n                return this.right.contains(value);\\r\\n            }\\r\\n        } else {\\r\\n            return (true);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    remove(value, parent = null) {\\r\\n        if (value < this.value) {\\r\\n            if (this.left !== null) {\\r\\n                this.left.remove(value, this);\\r\\n            }\\r\\n        } else if (value > this.value) {\\r\\n            if (this.right !== null) {\\r\\n                this.right.remove(value, this);\\r\\n            }\\r\\n        } else {\\r\\n            if (this.left !== null && this.right !== null) {\\r\\n                this.value = this.right.getMinValue();\\r\\n                this.right.remove(this.value, this);\\r\\n            } else if (parent === null) {\\r\\n                if (this.left !== null) {\\r\\n                    this.value = this.left.value;\\r\\n                    this.right = this.left.right;\\r\\n                    this.left = this.left.left;\\r\\n                } else if (this.right !== null) {\\r\\n                    this.value = this.right.value;\\r\\n                    this.left = this.right.left;\\r\\n                    this.right = this.right.right;\\r\\n                } else {\\r\\n                    \\r\\n                }\\r\\n            } else if (parent.left === this) {\\r\\n                parent.left = this.left !== null ? this.left : this.right;\\r\\n            } else if (parent.right === this) {\\r\\n                parent.right = this.left !== null ? this.left : this.right;\\r\\n            }\\r\\n        }\\r\\n        return this;\\r\\n    }\\r\\n\\r\\n    getMinValue() {\\r\\n        if (this.left == null) {\\r\\n            return this.value;\\r\\n        } else {\\r\\n            return this.left.getMinValue();\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n// Do not edit the line below.\\r\\nexports.BST = BST;\\r\\n\\r\\n```\\r\\n</div>\\r\\n</details>\\r\\n\\r\\n## Validate BST\\r\\nWrite a function that takes in a potentially invalid Binary Search Tree (BST)\\r\\nand returns a boolean representing whther the BST is valid.\\r\\n![](/img/2022-04-19-01-51-02.png)\\r\\n<details>\\r\\n<summary>\\r\\n Javascript Solution\\r\\n</summary>\\r\\n\\r\\n<div>\\r\\n\\r\\nThis is just about keep evaluating down the tree\\r\\n![](/img/2022-04-19-01-55-00.png)\\r\\n\\r\\n```javascript\\r\\nclass BST {\\r\\n    constructor(value) {\\r\\n        this.value = value;\\r\\n        this.left = null;\\r\\n        this.right = null;\\r\\n    }\\r\\n}\\r\\n\\r\\nfunction validateBst(tree) {\\r\\n    // Write your code here.\\r\\n    return validateBstHelper(tree, -Infinity, Infinity);\\r\\n}\\r\\n\\r\\n\\r\\nfunction validateBstHelper(tree, minValue, maxValue) {\\r\\n    if (tree === null) return true;\\r\\n    if (tree.value < minValue || tree.value >= maxValue) return false;\\r\\n    const leftIsValid = validateBstHelper(tree.left, minValue, tree.value);\\r\\n    return leftIsValid && validateBstHelper(tree.right, tree.value, maxValue);\\r\\n\\r\\n\\r\\n}\\r\\n```\\r\\n</div>\\r\\n</details>\\r\\n\\r\\n\\r\\n\\r\\n## BST Traversal\\r\\nWrite three functions that take in a Binary Search Tree (BST) and an empty\\r\\narray, traverse the BST, add its nodes\' values to the input array, and returns\\r\\nthat array. The three functions should traverse the BST using the in-order,\\r\\npre-order, and post-order tree-traversal techniques, respectively.\\r\\n\\r\\n![](/img/2022-04-19-01-58-34.png)\\r\\n<details>\\r\\n<summary>\\r\\n Javascript Solution\\r\\n</summary>\\r\\n\\r\\n<div>\\r\\n\\r\\nYou can see here how the pre, post, in order traversals affect them.\\r\\n![](/img/2022-04-19-02-02-45.png)\\r\\n\\r\\n\\r\\n```javascript\\r\\nfunction inOrderTraverse(tree, array) {\\r\\n    // Write your code here.\\r\\n    if (tree !== null) {\\r\\n        inOrderTraverse(tree.left, array);\\r\\n        array.push(tree.value);\\r\\n        inOrderTraverse(tree.right, array);\\r\\n    }\\r\\n    return array;\\r\\n\\r\\n}\\r\\n\\r\\nfunction preOrderTraverse(tree, array) {\\r\\n    // Write your code here.\\r\\n    if (tree !== null) {\\r\\n        array.push(tree.value);\\r\\n        preOrderTraverse(tree.left, array);\\r\\n        preOrderTraverse(tree.right, array);\\r\\n\\r\\n    }\\r\\n    return array;\\r\\n}\\r\\n\\r\\nfunction postOrderTraverse(tree, array) {\\r\\n    // Write your code here.\\r\\n    if (tree !== null) {\\r\\n        postOrderTraverse(tree.left, array);\\r\\n        postOrderTraverse(tree.right, array);\\r\\n        array.push(tree.value);\\r\\n    }\\r\\n    return array;\\r\\n}\\r\\n```\\r\\n</div>\\r\\n</details>"},{"id":"/2022/04/16/myanswers","metadata":{"permalink":"/blog/2022/04/16/myanswers","editUrl":"https://github.com/NeneWang/smoothdocs/tree/master/blog/2022-04-16-myanswers.md","source":"@site/blog/2022-04-16-myanswers.md","title":"Nelson\'s Behavioural Answers","description":"This blog post eventually will have my answers to all provided interview","date":"2022-04-16T00:00:00.000Z","formattedDate":"April 16, 2022","tags":[{"label":"my-answers","permalink":"/blog/tags/my-answers"},{"label":"behavioural","permalink":"/blog/tags/behavioural"}],"readingTime":0.735,"truncated":false,"authors":[{"name":"Nelson Wang","title":"Computer Science Student","url":"https://github.com/NeneWang","imageURL":"https://avatars.githubusercontent.com/u/29577570?v=4","key":"nelson"}],"frontMatter":{"title":"Nelson\'s Behavioural Answers","authors":"nelson","tags":["my-answers","behavioural"]},"prevItem":{"title":"Medium Algorithms Answers","permalink":"/blog/2022/04/17/mid-programming-algorithms"},"nextItem":{"title":"Devnotes","permalink":"/blog/dev-notes"}},"content":":::caution Blog Post In Progress\\r\\nThis blog post eventually will have my answers to all provided interview\\r\\nquestions. However for the moment, it just here for demo purposes...\\r\\n:::\\r\\n\\r\\n:::tip How to treat this post.\\r\\nHello everyone, I will be posting my answers to the different behavioural interview\\r\\nquestions over here. I am also learning and exploring job interview questions\\r\\nover here, so please don\'t treat this as how you should answer, but feel free to\\r\\nget inspired from my answers!\\r\\n:::\\r\\n\\r\\n## Basic Interview Questions\\r\\n\\r\\n- Tell me about yourself.\\r\\n  - I am a Computer Science student in Brooklyn College who likes creating software\\r\\nand stuff during his free time like this blog!\\r\\n- What are your strengths?\\r\\n  - My strenghts are that I stick with my promises and keep myself disciplined.\\r\\n- What are your weaknesses?\\r\\n  - Public Speaking is a big weakness of mine."},{"id":"/dev-notes","metadata":{"permalink":"/blog/dev-notes","editUrl":"https://github.com/NeneWang/smoothdocs/tree/master/blog/dev-notes.md","source":"@site/blog/dev-notes.md","title":"Devnotes","description":"Markdown to HTML (Including tables and links)","date":"2022-04-13T22:11:27.000Z","formattedDate":"April 13, 2022","tags":[],"readingTime":0.035,"truncated":false,"authors":[],"frontMatter":{"title":"Devnotes"},"prevItem":{"title":"Nelson\'s Behavioural Answers","permalink":"/blog/2022/04/16/myanswers"}},"content":"[Markdown to HTML (Including tables and links)](https://markdowntohtml.com/)"}]}')}}]);